package main

import (
	"encoding/json"
	"testing"
)

func TestFixedSwapBridge(t *testing.T) {
	proof := getFixedSwapProof()

	p, err := setupFixedCommittee()
	if err != nil {
		t.Error(err)
	}

	tx, err := SwapBridge(p.inc, auth, proof)
	if err != nil {
		t.Error(err)
	}
	p.sim.Commit()
	printReceipt(p.sim, tx)
}

func TestFixedSwapBeacon(t *testing.T) {
	proof := getFixedSwapProof()

	p, err := setupFixedCommittee()
	if err != nil {
		t.Error(err)
	}

	tx, err := SwapBeacon(p.inc, auth, proof)
	if err != nil {
		t.Error(err)
	}
	p.sim.Commit()
	printReceipt(p.sim, tx)
}

func getFixedSwapProof() *decodedProof {
	proofMarshalled := `{"Instruction":"NzIxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADnIti3HcwBUtR9JDhVakXTNX1jHwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOjUpRAANDhfjaiwxXQ5i1beSKxWlB1TzP3+nP8eBsPOGRycyIcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==","BeaconHeight":90,"BridgeHeight":86,"InstPaths":[[[127,145,240,157,94,42,115,23,1,92,233,155,174,164,6,134,146,159,39,127,48,214,128,183,173,208,206,50,145,33,234,192],[107,7,138,64,74,51,162,247,79,71,175,231,172,143,192,26,126,6,198,136,51,9,51,151,45,103,226,12,155,162,89,95],[175,198,81,148,19,191,203,195,121,37,156,114,205,37,95,27,106,225,198,194,157,207,67,86,215,135,228,157,186,58,52,94]],[]],"InstPathIsLefts":[[false,false,false],[]],"InstRoots":[[182,177,199,187,216,156,248,250,179,99,27,99,38,145,186,64,23,134,167,124,69,61,44,219,136,169,13,218,214,99,185,160],[126,106,9,14,53,221,12,29,140,88,180,61,168,214,103,126,139,62,61,154,231,254,161,140,104,196,112,142,111,226,4,59]],"BlkData":[[166,5,103,245,35,148,218,105,162,15,59,154,128,175,144,30,64,28,172,214,198,17,81,111,72,199,255,159,46,80,190,150],[111,71,179,205,55,92,27,19,249,236,151,129,89,130,173,111,36,68,63,114,139,213,62,40,109,183,170,182,88,109,26,243]],"SigIdxs":[[0,1,2,3,4,5,6,7,8,9],[0,1,2,3,4,5,6,7,8,9]],"SigVs":["GxwcGxsbGxwcHA==","GxwcGxsbGxwcHA=="],"SigRs":[[[1,35,5,212,201,112,238,24,114,216,123,156,141,229,59,250,105,135,130,34,43,179,24,134,22,144,249,134,63,76,90,42],[3,230,162,241,175,70,19,194,87,238,160,177,25,119,212,130,242,41,105,51,85,4,237,85,255,7,227,34,94,103,127,204],[134,226,181,223,89,23,26,135,185,78,56,175,105,71,78,185,124,58,116,31,198,227,212,136,227,226,125,99,218,68,97,47],[215,222,234,138,8,125,67,68,188,179,159,137,125,232,134,190,112,32,162,37,24,177,119,179,84,30,44,184,29,16,191,128],[119,139,246,131,84,56,38,27,168,72,87,116,174,199,196,75,98,57,195,10,158,104,247,74,164,23,175,103,61,243,29,53],[152,244,169,215,31,96,234,134,50,31,132,228,202,108,206,30,245,130,126,42,232,226,42,209,148,77,112,18,88,32,166,38],[203,166,118,201,142,52,137,226,126,233,211,125,78,195,146,57,246,5,35,57,15,48,195,10,214,180,254,182,14,172,197,227],[191,94,8,209,130,153,142,195,31,25,168,211,116,75,231,141,80,37,183,251,51,248,123,78,113,236,29,121,124,249,45,220],[214,242,139,197,17,56,34,63,14,102,32,244,46,79,186,17,89,19,13,77,250,19,110,122,179,95,244,8,30,76,238,50],[98,233,253,56,166,59,1,128,164,31,119,122,48,113,123,25,135,130,220,142,67,235,236,50,129,163,240,229,230,172,160,105]],[[1,35,5,212,201,112,238,24,114,216,123,156,141,229,59,250,105,135,130,34,43,179,24,134,22,144,249,134,63,76,90,42],[3,230,162,241,175,70,19,194,87,238,160,177,25,119,212,130,242,41,105,51,85,4,237,85,255,7,227,34,94,103,127,204],[134,226,181,223,89,23,26,135,185,78,56,175,105,71,78,185,124,58,116,31,198,227,212,136,227,226,125,99,218,68,97,47],[215,222,234,138,8,125,67,68,188,179,159,137,125,232,134,190,112,32,162,37,24,177,119,179,84,30,44,184,29,16,191,128],[119,139,246,131,84,56,38,27,168,72,87,116,174,199,196,75,98,57,195,10,158,104,247,74,164,23,175,103,61,243,29,53],[152,244,169,215,31,96,234,134,50,31,132,228,202,108,206,30,245,130,126,42,232,226,42,209,148,77,112,18,88,32,166,38],[203,166,118,201,142,52,137,226,126,233,211,125,78,195,146,57,246,5,35,57,15,48,195,10,214,180,254,182,14,172,197,227],[191,94,8,209,130,153,142,195,31,25,168,211,116,75,231,141,80,37,183,251,51,248,123,78,113,236,29,121,124,249,45,220],[214,242,139,197,17,56,34,63,14,102,32,244,46,79,186,17,89,19,13,77,250,19,110,122,179,95,244,8,30,76,238,50],[98,233,253,56,166,59,1,128,164,31,119,122,48,113,123,25,135,130,220,142,67,235,236,50,129,163,240,229,230,172,160,105]]],"SigSs":[[[79,141,170,119,159,113,62,83,155,190,137,66,227,144,50,95,195,96,164,129,27,10,86,143,188,253,156,37,71,246,18,217],[72,200,251,149,41,200,222,29,144,151,54,103,71,197,85,132,127,41,231,56,56,195,108,51,238,193,252,194,102,68,31,193],[30,129,18,24,105,178,211,156,57,224,213,188,226,122,35,62,116,136,194,84,196,17,155,132,85,36,29,137,177,112,144,220],[28,128,96,218,13,54,80,80,27,108,124,125,73,64,210,36,219,198,78,171,77,139,234,228,182,53,143,75,155,83,142,42],[6,160,134,144,80,72,180,147,203,239,196,214,79,225,238,70,136,54,255,236,103,168,31,205,32,90,146,196,38,103,131,11],[95,188,171,63,190,142,142,90,151,141,207,186,229,79,104,145,127,128,86,232,2,206,188,36,121,132,100,19,236,5,78,151],[40,7,4,240,224,247,15,26,164,62,233,224,252,33,252,9,237,175,160,14,194,156,235,255,105,108,80,78,127,167,196,59],[127,220,136,94,85,58,229,33,176,135,156,184,108,56,145,229,205,175,75,173,108,209,253,41,242,72,47,162,130,249,57,120],[110,227,64,250,41,237,91,65,40,82,151,167,188,4,81,136,26,74,173,19,143,166,250,67,167,181,7,213,133,97,16,109],[124,91,58,188,130,36,220,53,152,42,31,157,253,52,217,161,136,98,170,216,245,78,210,217,5,182,232,28,127,188,248,167]],[[79,141,170,119,159,113,62,83,155,190,137,66,227,144,50,95,195,96,164,129,27,10,86,143,188,253,156,37,71,246,18,217],[72,200,251,149,41,200,222,29,144,151,54,103,71,197,85,132,127,41,231,56,56,195,108,51,238,193,252,194,102,68,31,193],[30,129,18,24,105,178,211,156,57,224,213,188,226,122,35,62,116,136,194,84,196,17,155,132,85,36,29,137,177,112,144,220],[28,128,96,218,13,54,80,80,27,108,124,125,73,64,210,36,219,198,78,171,77,139,234,228,182,53,143,75,155,83,142,42],[6,160,134,144,80,72,180,147,203,239,196,214,79,225,238,70,136,54,255,236,103,168,31,205,32,90,146,196,38,103,131,11],[95,188,171,63,190,142,142,90,151,141,207,186,229,79,104,145,127,128,86,232,2,206,188,36,121,132,100,19,236,5,78,151],[40,7,4,240,224,247,15,26,164,62,233,224,252,33,252,9,237,175,160,14,194,156,235,255,105,108,80,78,127,167,196,59],[127,220,136,94,85,58,229,33,176,135,156,184,108,56,145,229,205,175,75,173,108,209,253,41,242,72,47,162,130,249,57,120],[110,227,64,250,41,237,91,65,40,82,151,167,188,4,81,136,26,74,173,19,143,166,250,67,167,181,7,213,133,97,16,109],[124,91,58,188,130,36,220,53,152,42,31,157,253,52,217,161,136,98,170,216,245,78,210,217,5,182,232,28,127,188,248,167]]]}`
	// old := &oldProof{}
	// json.Unmarshal([]byte(proofMarshalled), old)
	// old.BeaconInstPath = old.BeaconInstPath[:old.BeaconInstPathLen.Uint64()]
	// old.BeaconInstPathIsLeft = old.BeaconInstPathIsLeft[:old.BeaconInstPathLen.Uint64()]
	// old.BridgeInstPath = old.BridgeInstPath[:old.BridgeInstPathLen.Uint64()]
	// old.BridgeInstPathIsLeft = old.BridgeInstPathIsLeft[:old.BridgeInstPathLen.Uint64()]
	// fmt.Printf("oldProof: %+v\n", old)
	// proof := &decodedProof{
	// 	Instruction:  old.Instruction,
	// 	BeaconHeight: old.BeaconHeight,
	// 	BridgeHeight: old.BridgeHeight,

	// 	InstPaths:       [2][][32]byte{old.BeaconInstPath, old.BridgeInstPath},
	// 	InstPathIsLefts: [2][]bool{old.BeaconInstPathIsLeft, old.BridgeInstPathIsLeft},
	// 	InstRoots:       [2][32]byte{old.BeaconInstRoot, old.BridgeInstRoot},
	// 	BlkData:         [2][32]byte{old.BeaconBlkData, old.BridgeBlkData},
	// 	SigIdxs:         [2][]*big.Int{old.BeaconSigIdxs, old.BridgeSigIdxs},
	// 	SigVs:           [2][]uint8{old.BeaconSigVs, old.BridgeSigVs},
	// 	SigRs:           [2][][32]byte{old.BeaconSigRs, old.BridgeSigRs},
	// 	SigSs:           [2][][32]byte{old.BeaconSigSs, old.BridgeSigSs},
	// }
	// a, err := json.Marshal(proof)
	// fmt.Printf("newProof: %s %v\n", a, err)
	proof := &decodedProof{}
	json.Unmarshal([]byte(proofMarshalled), proof)
	// fmt.Printf("proof: %+v\n", proof)
	return proof
}
